version: '3.5'

services:

  web:
    container_name: "web"
    build: ./web
    env_file:
      - .env
    volumes:
      - ./web/:/usr/src/app/
    ports:
      - 8000:1111
    networks:
      - custom
    depends_on:
      db_test:
        condition: service_healthy

  test_api:
    container_name: "test_api"
    build:
      context: /usr/src/app
      dockerfile: /web/Dockerfile.test
    env_file:
      - .env
#    volumes:
#      - ./web/:/usr/src/app/
#    ports:
#      - 8000:1111
#    networks:
#      - custom
    depends_on:
      - web


#  db:
#    container_name: "db"
#    image: postgres:15.1-alpine
#    volumes:
#      - ./db_dev/:/var/lib/postgresql/data/
#    env_file:
#      - .env
#    ports:
#      - '5432:5432'
#    networks:
#      - custom
#    healthcheck:
#      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
#      interval: 5s
#      timeout: 30s
#      retries: 10
#      start_period: 70s

  db_test:
    container_name: "db_test"
    image: postgres:15.1-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TEST}
    command: -p ${DB_PORT_TEST}
    expose:
      - ${DB_PORT_TEST}
    networks:
      - custom
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER_TEST} -d ${POSTGRES_DB_TEST}'"]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 70s


#volumes:
#  db_dev:
#    name: db_dev

networks:
  custom:
    driver: bridge